bl_info = {
    "name":"Physics Array",
    "author":"Rhys Rodrigues",
    "version": (1, 1),
    "blender": (2,80,0),
    "category":"Mesh",
    "location":"Operator Search",
    "description":"arrays the selected object and adds a rbd to it",
    "warning":"",
    "doc_url":"",
    "tracker_url": "",
}

import bpy
from numpy.random import seed
from numpy.random import rand
from numpy.random import randint


shape='CONVEX_HULL'

class MESH_OT_new_array(bpy.types.Operator):
     """ Add A RigidBody array"""
     bl_idname="mesh.rigidbody_array"
     bl_label="RigidBody array"
     bl_options ={'REGISTER','UNDO'}

     x: bpy.props.IntProperty(        
        name="x",
        description="Number Of Cubes In The X Direction",
        default=2,
        min=1 , soft_max =5
      )

     y: bpy.props.IntProperty(        
        name="y",
        description="Number Of Cubes In The Y Direction",
        default=2,
        min=1 , soft_max =5
      )
     z: bpy.props.IntProperty(        
        name="z",
        description="Number Of Cubes In The Z Direction",
        default=3,
        min=1 , soft_max =5
      )
    
     size: bpy.props.FloatProperty(        
        name="size",
        description="Number Of Cubes In The X Direction",
        default=4,
        soft_min=2 
      )

     shape: bpy.props.StringProperty(        
        name="rigid body shape",
        description="Collision Shape",
        default='CONVEX_HULL',
      )
      
     linked_duplicate: bpy.props.BoolProperty(        
        name="Linked Duplicate",
        description="should the objects be linked saves memory" ,
        default= True ,
      )
      
     Random_Rotation: bpy.props.BoolProperty(        
        name="Randomize Rotation",
        description="gives all arrayed objects a random rotation" ,
        default= False
      )   
     rotationseed: bpy.props.IntProperty(        
        name="Rotation Seed",
        description="Seed for Random Rotation" ,
        default= 1,
        min=0

      )

     def execute(self, context):
         def makerbd(rbd_collision_shape):
             bpy.ops.rigidbody.object_add()
             bpy.context.object.rigid_body.collision_shape = rbd_collision_shape

    
         def rand_rotation(randomrot):
             
             if randomrot == True:
                seed(self.rotationseed)
                bpy.ops.transform.trackball(value=(rand(2)))
                bpy.ops.transform.rotate(value=rand(1), orient_axis='Z', orient_type='VIEW', orient_matrix=((rand(3)), (rand(3)), (rand(3))))



         def array(x,y,z,dist,rbd_co_shape):
             makerbd(rbd_co_shape)
             olx=bpy.context.active_object.location[0]
             oly=bpy.context.active_object.location[1]
             olz=bpy.context.active_object.location[2] 
             for repeat2 in range(z):
                 for repeat2 in range(y):
                     for repeat1 in range(x-1):
                         rand_rotation(self.Random_Rotation)
                         bpy.ops.object.duplicate_move(OBJECT_OT_duplicate={"linked":self.linked_duplicate, "mode":'TRANSLATION'}, TRANSFORM_OT_translate={"value":(dist, 0, 0)}) 
                         rand_rotation(self.Random_Rotation)               
                     bpy.ops.object.duplicate_move(OBJECT_OT_duplicate={"linked":self.linked_duplicate, "mode":'TRANSLATION'}, TRANSFORM_OT_translate={"value":(dist, 0, 0)})                
                     bpy.ops.transform.translate(value=(olx-bpy.context.active_object.location[0], dist, 0))
                 bpy.ops.transform.translate(value=(olx-bpy.context.active_object.location[0], oly-bpy.context.active_object.location[1], dist))
             bpy.ops.object.delete(use_global=False)


         array(self.x,self.y,self.z,self.size,self.shape)
         return {"FINISHED"} 













class MESH_OT_cube_array(bpy.types.Operator):
     """ Add A cube array"""
     bl_idname="mesh.cube_array"
     bl_label="cube array"
     bl_options ={'REGISTER','UNDO'}
     

################################################################################################################

        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
################################################################################################################
    
     
     x: bpy.props.IntProperty(          #no of objs in the x axis
        name="x",
        description="Number Of Cubes In The X Direction",
        default=2,
        min=1 , soft_max =5
     )
     
     y: bpy.props.IntProperty(          #no of objs in the y axis
        name="y",
        description="Number Of Cubes In The Y Direction",
        default=3,
        min=1 , soft_max =5
     )
     
     z: bpy.props.IntProperty(          #no of objs in the z axis
        name="z",
        description="Number Of Cubes In The Z Direction",
        default=4,
        min=0 , soft_max =5
     )
     
     size1: bpy.props.FloatProperty(          #no of objs in the z axis
        name="Size",
        description="Size Of The Individual Objects",
        default=2,
        min=0.1 , soft_max =10
     )
     
     
     inbetween_dist: bpy.props.FloatProperty(
        name="Inbetween Distance",
        description="distance between objects",
        default=1,
        min=1 
     )
     
     x_offset: bpy.props.FloatProperty(
        name="X Offset",
        description="Offset Along The X Axis",
        default=0,
        
     )
     
     y_offset: bpy.props.FloatProperty(
        name="Y Offset",
        description="Offset Along The Y Axis",
        default=0,
        
     )
     
     z_offset: bpy.props.FloatProperty(
        name="Z Offset",
        description="Offset Along The Z Axis",
        default=0,
        
     )
     
     rbd_density: bpy.props.FloatProperty(
        name="RigidBody Density",
        description="Density Of Each Object",
        default=100,
        min=0.01 
        
     )
     
     isdeactivated: bpy.props.BoolProperty(
        name="Rigid Body Deactivated",
        description="enable or disable deactivation",
        default=True,
     )
     
     startdeactivated: bpy.props.BoolProperty(
        name="Start Deactivated",
        description="enable or disable start deactivated",
        default=True,
     )
        
     on_floor: bpy.props.BoolProperty(
        name="On Floor",
        description="Spawn On The Floor Or At The World Origin",
        default=True,
        
     )
     
     create_floor: bpy.props.BoolProperty(
        name="Create Floor plane",
        description="Create A Plane On The World Floor",
        default=True,
        
     )
     
     plane_size: bpy.props.FloatProperty(
        name="floor size",
        description="Create A Plane On The World Floor",
        default=5,
        
     )
        

################################################################################################################

    
     def execute(self, context):
         
         
        def makerbd():                                                     #makes the object a ridgid body
            bpy.ops.rigidbody.object_add()
            bpy.context.object.rigid_body.collision_shape = 'BOX'          #sets the rigid body collision shape
            bpy.context.object.rigid_body.use_deactivation = self.isdeactivated          #enable or disable deactivation
            bpy.context.object.rigid_body.use_start_deactivated  = self.startdeactivated  #enable or disable start deactivated
            bpy.ops.rigidbody.mass_calculate(material='Custom', density=self.rbd_density)

################################################################################################################

        def add_ground_plane(x,y,x_loc,y_loc,sc):
            bpy.ops.mesh.primitive_plane_add(
            size=1,
            location=(x_loc,y_loc, 0)
            )
            bpy.ops.transform.resize(value=(x, y, 1))
#            bpy.ops.transform.resize(value=(sc, sc, 1))

                
################################################################################################################                
                
                

        if self.on_floor == True:
            z_floor_offset=(self.size1/2)+self.z_offset
        else:
            z__floor_offset=0+self.z_offset
            
        
            
################################################################################################################     
     

        for idx in range(self.x):
                    lx=idx*self.size1*self.inbetween_dist
                            
                    for idy in range(self.y):
                            
                        ly=idy*self.size1*self.inbetween_dist
                        bpy.ops.mesh.primitive_cube_add(
                        size=self.size1,
                        location=(lx+self.x_offset,ly+self.y_offset,z_floor_offset))
                        makerbd()

                                        
                        for idz in range(self.z-1):
                            bpy.ops.mesh.primitive_cube_add(
                            size=self.size1,
                            location=(lx+self.x_offset,ly+self.y_offset,((idz+1)*self.size1*self.inbetween_dist)+z_floor_offset)                     ) 
                            makerbd()
                            
                            
                            
################################################################################################################                            

#        plane_x=(self.size1*(self.x-1))+(self.inbetween_dist*self.x)*self.plane_size
#        plane_y=(self.size1*(self.y-1))+(self.inbetween_dist*self.y)*self.plane_size
        plane_x=self.plane_size*2*self.size1*self.inbetween_dist
        plane_y=self.plane_size*2*self.size1*self.inbetween_dist

#        xplane_offset=-((self.size1)/2)+(self.x)+(self.inbetween_dist/2)*self.x-((self.size1)/2)
#        yplane_offset=-((self.size1)/2)+(self.y)+(self.inbetween_dist/2)*self.y-((self.size1)/2)

        if self.create_floor==True:
            add_ground_plane(plane_x,plane_y,0,0,self.size1/2)
            bpy.ops.rigidbody.object_add()
            bpy.context.object.rigid_body.collision_shape = 'BOX'
            bpy.context.object.rigid_body.type = 'PASSIVE'
                   
                                                        
        return {"FINISHED"} 





class MESH_OT_ground_plane(bpy.types.Operator):
     """ Add A Ground Plane"""
     bl_idname="mesh.ground_plane"
     bl_label="ground plane"
     bl_options ={'REGISTER','UNDO'}
     
     Ground_size: bpy.props.FloatProperty(
        name="Ground Size",
        description="Size Of the Ground Plane",
        default=1,
        step=10,
        
     )
     
     def execute(self, context):
         
         def makerbd():                                                     #makes the object a ridgid body
            bpy.ops.rigidbody.object_add()
            bpy.context.object.rigid_body.collision_shape = 'BOX'          #sets the rigid body collision shape
            bpy.context.object.rigid_body.type = 'PASSIVE'


                  
         bpy.ops.mesh.primitive_plane_add(size=(self.Ground_size*10)+100, enter_editmode=False, align='WORLD', location=(0, 0, 0))
         makerbd()
         return {"FINISHED"} 






















class VIEW3D_PT_ground_plane(bpy.types.Panel):
     
     bl_space_type='VIEW_3D'
     bl_region_type='UI'
     bl_category ='Physics Array'
     bl_label='Start'

     def draw(self, context):
        col = self.layout.column()
        col.operator("mesh.ground_plane",
            text="Add Ground Plane",
            icon="MESH_PLANE"
            )




class VIEW3D_PT_new_array(bpy.types.Panel):
     
     bl_space_type='VIEW_3D'
     bl_region_type='UI'
     bl_category ='Physics Array'
     bl_label='Modify'

     def draw(self, context):
        col = self.layout.column()
        col.operator("mesh.rigidbody_array",
            text="Selected Mesh Array",
            icon="DUPLICATE"
            )
            
class VIEW3D_PT_cube_array(bpy.types.Panel):
     
     bl_space_type='VIEW_3D'
     bl_region_type='UI'
     bl_category ='Physics Array'
     bl_label='Create'

     def draw(self, context):
        col = self.layout.column()
        col.operator("mesh.cube_array",
            text="Create Cube Array",
            icon="MOD_ARRAY"
            )
            


def register():
    bpy.utils.register_class(VIEW3D_PT_ground_plane)
    bpy.utils.register_class(MESH_OT_cube_array)
    bpy.utils.register_class(VIEW3D_PT_new_array)
    bpy.utils.register_class(VIEW3D_PT_cube_array)
    bpy.utils.register_class(MESH_OT_new_array)
    
    bpy.utils.register_class(MESH_OT_ground_plane)
    
         
def unregister():
    bpy.utils.unregister_class(VIEW3D_PT_ground_plane) 
    bpy.utils.unregister_class(MESH_OT_new_array) 
    bpy.utils.unregister_class(VIEW3D_PT_new_array)
    bpy.utils.unregister_class(VIEW3D_PT_cube_array)
    bpy.utils.unregister_class(MESH_OT_cube_array)
    
    bpy.utils.unregister_class(MESH_OT_ground_plane)      
     


    
    

        
    
   

